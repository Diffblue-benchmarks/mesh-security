@App:name("tracing-app")
@App:description("VICK Tracing Siddhi App for processing and storing trace spans")

@source(type="tracing-receiver", host="0.0.0.0", port="9411", api.context="/api/v1/spans",
        @map(type="keyvalue", fail.on.missing.attribute="false"))
define stream ZipkinStreamIn (traceId string, id string, parentId string, name string, serviceName string,
                              kind string, timestamp long, duration long, tags string);

@source(type="inMemory", topic="istio-mixer-report", @map(type="passThrough"))
define stream TelemetryStreamIn (sourceNamespace string, sourceCell string, sourceVICKService string,
                                 sourcePod string, destinationNamespace string, destinationCell string,
                                 destinationVICKService string, destinationPod string, requestHeadersMap object,
                                 requestPath string, requestMethod string, responseCode long,
                                 responseDurationNanoSec int, contextReporterKind string);

@Store(type="rdbms", datasource="Message_Tracing_DB", field.length="tags:8000")
@PrimaryKey("traceId", "spanId", "kind")
define table DistributedTracingTable (traceId string, spanId string, parentId string, namespace string, cell string,
                                      vickService string, pod string, operationName string, kind string,
                                      startTime long, duration long, tags string);

-- Storing Zipkin data received for Tracing

from ZipkinStreamIn
select
    traceId,
    id as spanId,
    parentId,
    "" as namespace,
    ifThenElse(str:contains(serviceName, "--"), str:split(serviceName, "--", 0), "") as cell,
    ifThenElse(str:contains(serviceName, "--"), str:split(serviceName, "--", 1), serviceName) as vickService,
    "" as pod,
    name as operationName,
    kind,
    timestamp as startTime,
    duration,
    tags
update or insert into DistributedTracingTable
    set DistributedTracingTable.parentId = parentId, DistributedTracingTable.operationName = operationName,
        DistributedTracingTable.startTime = startTime, DistributedTracingTable.duration = duration,
        DistributedTracingTable.tags = tags
    on DistributedTracingTable.traceId == traceId and DistributedTracingTable.spanId == spanId
        and DistributedTracingTable.kind == kind;

-- Filling additional data from Telemetry

-- Extracting information for local service
from TelemetryStreamIn
select
    requestHeadersMap,
    ifThenElse(contextReporterKind == "inbound", "SERVER", "CLIENT") as kind,
    ifThenElse(contextReporterKind == "inbound", destinationNamespace, sourceNamespace) as namespace,
    ifThenElse(contextReporterKind == "inbound", destinationCell, sourceCell) as cell,
    ifThenElse(contextReporterKind == "inbound", destinationVICKService, sourceVICKService) as vickService,
    ifThenElse(contextReporterKind == "inbound", destinationPod, sourcePod) as pod
insert into ExtractedTelemetryStream;

-- Extracting information for remote service
from TelemetryStreamIn
select
    requestHeadersMap,
    ifThenElse(contextReporterKind == "inbound", "CLIENT", "SERVER") as kind,
    ifThenElse(contextReporterKind == "inbound", sourceNamespace, destinationNamespace) as namespace,
    ifThenElse(contextReporterKind == "inbound", sourceCell, destinationCell) as cell,
    ifThenElse(contextReporterKind == "inbound", sourceVICKService, destinationVICKService) as vickService,
    ifThenElse(contextReporterKind == "inbound", sourcePod, destinationPod) as pod
insert into ExtractedTelemetryStream;

from ExtractedTelemetryStream[vickService != ""]
select
    cast(map:get(requestHeadersMap, "x-b3-traceid"), "string") as traceId,
    cast(map:get(requestHeadersMap, "x-b3-spanid"), "string") as spanId,
    "" as parentId,
    namespace,
    cell,
    vickService,
    pod,
    "" as operationName,
    kind,
    0L as startTime,
    0L as duration,
    "{}" as tags
update or insert into DistributedTracingTable
    set DistributedTracingTable.namespace = namespace, DistributedTracingTable.cell = cell,
        DistributedTracingTable.vickService = vickService, DistributedTracingTable.pod = pod
    on DistributedTracingTable.traceId == traceId and DistributedTracingTable.spanId == spanId
        and DistributedTracingTable.kind == kind;
