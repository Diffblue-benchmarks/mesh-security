@App:name("tracing-query-app")
@App:description("VICK Tracing Query Siddhi App which queries the stored Zipkin spans")

@Store(type="rdbms", datasource="Message_Tracing_DB", field.length="tags:8000")
@PrimaryKey("traceId", "spanId", "kind")
define table SpanTable (traceId string, spanId string, parentId string, cellName string, serviceName string,
                        operationName string, kind string, startTime long, duration long, tags string);

@source(type="http-request", source.id="trace-search-query-id", receiver.url="http://0.0.0.0:8080/api/tracing/search",
        @map(type="json", fail.on.missing.attribute="false",
            @attributes(messageId="trp:messageId", cellName="cellName", serviceName="serviceName",
                        operationName="operationName", tags="tags", minDuration="minDuration",
                        maxDuration="maxDuration", queryStartTime="queryStartTime", queryEndTime="queryEndTime")))
define stream TraceSearchQueryStreamIn (messageId string, cellName string, serviceName string, operationName string,
                                        tags string, minDuration long, maxDuration long, queryStartTime long,
                                        queryEndTime long);

@sink(type="http-response", source.id="trace-search-query-id",
      headers="'Access-Control-Allow-Origin:*'", message.id="{{messageId}}", @map(type='json'))
define stream TraceSearchQueryStreamOut (messageId string, traceId string, cellName string, serviceName string,
                                         count long, rootServiceName string, rootOperationName string,
                                         rootStartTime long, rootDuration long);

@source(type="http-request", source.id="trace-query-id", receiver.url="http://0.0.0.0:8080/api/tracing",
        @map(type="json", fail.on.missing.attribute="false",
            @attributes(messageId="trp:messageId", traceId="traceId")))
define stream TraceQueryStreamIn (messageId string, traceId string);

@sink(type="http-response", source.id="trace-query-id",
      headers="'Access-Control-Allow-Origin:*'", message.id="{{messageId}}", @map(type='json'))
define stream TraceQueryStreamOut (messageId string, traceId string, spanId string, parentId string, serviceName string,
                                   operationName string, kind string, startTime long, duration long, tags string);

--
-- Trace Search
--

define function filterByTags[javascript] return bool {
    var queryTags = JSON.parse(data[0]);
    var tags = JSON.parse(data[1]);
    var isSelected;
    if (queryTags && Object.keys(queryTags).length > 0) {
        isSelected = false;
        if (tags) {
            for (var tagKey in queryTags) {
                if (queryTags.hasOwnProperty(tagKey) && queryTags[tagKey] === tags[tagKey]) {
                    isSelected = true;
                    break;
                }
            }
        }
    } else {
        isSelected = true;
    }
    return isSelected;
};

from TraceSearchQueryStreamIn
select
    messageId,
    default(cellName, "") as cellName,
    default(serviceName, "") as serviceName,
    default(operationName, "") as operationName,
    default(tags, "{}") as tags,
    default(minDuration, -1L) as minDuration,
    default(maxDuration, -1L) as maxDuration,
    default(queryStartTime, -1L) as queryStartTime,
    default(queryEndTime, -1L) as queryEndTime
insert into SanitizedTraceSearchQueryStreamIn;

from SanitizedTraceSearchQueryStreamIn#window.length(1) as q left outer join SpanTable as t
    on (q.cellName == "" or t.cellName == q.cellName)
        and (q.serviceName == "" or t.serviceName == q.serviceName)
        and (q.operationName == "" or t.operationName == q.operationName)
        and (q.minDuration == -1 or t.duration >= q.minDuration)
        and (q.maxDuration == -1 or t.duration <= q.maxDuration)
        and (q.queryStartTime == -1 or t.startTime >= q.queryStartTime)
        and (q.queryEndTime == -1 or t.startTime <= q.queryEndTime)
select q.messageId, t.traceId, t.tags, q.tags as queryTags
insert into TempSelectionStream;

from TempSelectionStream[filterByTags(queryTags, tags)]#window.batch()
select messageId, str:groupConcat(traceId, "|", true) as traceIdRegex
group by messageId
insert into SelectedTracesStream;

from SelectedTracesStream#rdbms:query(
    "Message_Tracing_DB",
    str:concat(
        "SELECT a.traceId, a.cellName, a.serviceName, a.count, t.serviceName as rootServiceName, ",
        "t.operationName as rootOperationName, t.startTime as rootStartTime, t.duration as rootDuration FROM (",
            "SELECT traceId, cellName, serviceName, COUNT(spanId) as count FROM SpanTable ",
            "WHERE traceId RLIKE '^(", traceIdRegex, ")$' GROUP BY traceId, cellName, serviceName",
        ") AS a INNER JOIN SpanTable AS t ON t.traceId = t.spanId AND (t.kind = 'SERVER' OR t.kind IS NULL) ",
        "AND a.traceId = t.traceId ORDER BY t.startTime DESC;"
    ),
    "traceId string, cellName string, serviceName string, count long, rootServiceName string, rootOperationName string, rootStartTime long, rootDuration long"
)
select
    messageId, traceId, cellName, serviceName, count, rootServiceName, rootOperationName, rootStartTime, rootDuration
insert into TraceSearchQueryStreamOut;

--
-- Trace Query for fetching a single trace
--

from TraceQueryStreamIn#window.length(1) as q left outer join SpanTable as t
    on q.traceId == t.traceId
select
    q.messageId, t.traceId, t.spanId, t.parentId, t.serviceName, t.operationName, t.kind, t.startTime,
    t.duration, t.tags
insert into TraceQueryStreamOut;
