@App:name("telemetry-app")
@App:description("VICK Telemetry app for processing and storing http requests")

@source(type="inMemory", topic="istio-mixer-report", @map(type="passThrough"))
define stream TelemetryStreamIn(sourceNamespace string, sourceCell string, sourceVICKService string,
                                sourcePod string, destinationNamespace string, destinationCell string,
                                destinationVICKService string, destinationPod string, requestHeadersMap object,
                                requestPath string, requestMethod string, responseCode long,
                                responseDurationNanoSec int, contextReporterKind string);

define stream ProcessedRequestsStream(sourceNamespace string, sourceCell string, sourceVICKService string,
                                      destinationNamespace string, destinationCell string,
                                      destinationVICKService string, requestPath string, requestMethod string,
                                      httpResponseGroup string, responseTime double);

@store(type="rdbms", datasource="VICK_OBSERVABILITY_DB")
@purge(enable="false")
define aggregation RequestAggregation from ProcessedRequestsStream
select
    sourceNamespace,
    sourceCell,
    sourceVICKService,
    destinationNamespace,
    destinationCell,
    destinationVICKService,
    requestPath,
    requestMethod,
    httpResponseGroup,
    avg(responseTime) as avgResponseTime,
    count() as requestCount
group by
    sourceNamespace, sourceCell, sourceVICKService,
    destinationNamespace, destinationCell, destinationVICKService,
    requestPath, requestMethod, httpResponseGroup
aggregate every sec...year;

--
-- Storing the data received from Istio Telemetry
--

from TelemetryStreamIn
select
    sourceNamespace,
    sourceCell,
    sourceVICKService,
    destinationNamespace,
    destinationCell,
    destinationVICKService,
    cast(map:get(requestHeadersMap, "x-request-id"), "string") as requestId,
    requestPath,
    requestMethod,
    str:concat(convert(cast(responseCode, "int") / 100, "string"), "xx") as httpResponseGroup,
    convert((responseDurationNanoSec / 1000000), "double") as responseTime
insert into ProcessedTelemetryStream;

from every(e1=ProcessedTelemetryStream) ->
    not ProcessedTelemetryStream[e1.requestId == e2.requestId] for 10 minutes
    or e2=ProcessedTelemetryStream[e1.requestId == e2.requestId] within 10 minutes
select
    e1.sourceNamespace, e1.sourceCell, e1.sourceVICKService, e1.destinationNamespace, e1.destinationCell,
    e1.destinationVICKService, e1.requestPath, e1.requestMethod, e1.httpResponseGroup, e1.responseTime
insert into ProcessedRequestsStream;
